# code-snips:
- title: "ada_tdc_2020.tanf_2009q1"
  category: create_table
  section: tanf
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.tanf_2009q1;
  \nCREATE TABLE ada_tdc_2020.tanf_2009q1
  \nSELECT distinct 
  \na.snn, a.caseid
  \nFROM in_fssa.person_month a 
  \nINNER JOIN in_fssa.case_month on a.caseid = b.caseid
  \nWHERE
  \na.relat = '01' and
  \na.tanf_end = TRUE and
  \nsubstring(a.month,1,4)  = '2009' and
  \nsubstring(a.month,5,2)  in ('01','02','03') 
  \norder by a.ssn,a.month desc"

- title: "ada_tdc_2020.tanf_2016q4"
  category: create_table
  section: tanf
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.tanf_2016q4;
  \nCREATE TABLE ada_tdc_2020.tanf_2016q4
  \nSELECT distinct on (a.ssn)
  \na.snn, a.caseid, a.tanf_start, a.tanf_end, b.county
  \nFROM in_fssa.person_month a 
  \nINNER JOIN in_fssa.case_month on a.caseid = b.caseid
  \nWHERE
  \na.relat = '01' and
  \na.tanf_end = TRUE and
  \nsubstring(a.month,1,4)  = '2016' and
  \nsubstring(a.month,5,2)  in ('10','11','12') 
  \norder by a.ssn,a.month desc"

- title: "ada_tdc_2020.tanf_sprintf_query_inputs"
  category: create_table
  section: tanf
  notebook: create_tables
  language: r
  code: "month_quarter_df <- data.frame(\"month\" = sprintf(\"%02d\",1:12),\"quarter\" = 
  c(rep(1,3),rep(2,3),rep(3,3),rep(4,3)))
  \nexit_quarter <- 1
  \nexit_year <- 2009
  \nquarter_months <- paste0(sprintf(\"'%s'\", month_quarter_df$quarter == exit_quarter
  , \"month\"]), collapse = \",\")
  \ntable_name <- paste0(\"tanf_\",exit_year,\"q\",exit_quarter)"

- title: "ada_tdc_2020.tanf_sprintf_query"
  category: create_table
  section: tanf
  notebook: create_tables
  language: r
  code: "query <- sprintf(\"
  \nDROP TABLE IF EXISTS ada_tdc_2020.%s;
  \nCREATE TABLE ada_tdc_2020.%s
  \nSELECT distinct distinct on (a.ssn)
  \na.snn, a.caseid, a.tanf_start, a.tanf_end, b.county
  \nFROM in_fssa.person_month a 
  \nINNER JOIN in_fssa.case_month on a.caseid = b.caseid
  \nWHERE
  \na.relat = '01' and
  \na.tanf_end = TRUE and
  \nsubstring(a.month,1,4)  = '%s' and
  \nsubstring(a.month,5,2)  in (%s) 
  \norder by a.ssn,a.month desc\"
  \n,table_name,table_name,exit_year,quarter_months)"

- title: "ada_tdc_2020.tanf_wage_2009q1"
  category: create_table
  section: wages
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.tanf_wage_2009q1;
\nCREATE TABLE ada_tdc_2020.wage_2009q1
\nSELECT 
\nssn, year, quarter, uiacct, wages, 
\nformat('%s-%s-1', year, quarter*3-2) as job_yr_q
\nFROM in_dwd.wage_by_employer
\nWHERE 
\n((year IN (2009, 2010)) OR (year = 2011 and quarter = 1)) AND
\nssn IN (select distinct ssn from ada_tdc_2020.tanf_2009q1)"

- title: "ada_tdc_2020.tanf_wage_2016q4"
  category: create_table
  section: wages
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.tanf_wage_2016q4;
\nCREATE TABLE ada_tdc_2020.wage_2016q4
\nSELECT 
\nssn, year, quarter, uiacct, wages, 
\nformat('%s-%s-1', year, quarter*3-2) as job_yr_q
\nFROM in_dwd.wage_by_employer
\nWHERE 
\n((year IN (2017,2018)) OR (year = 2016 and quarter = 4)) AND
\nssn IN (select distinct ssn from ada_tdc_2020.tanf_2016q4)"

- title: "all_empl_wage_2016q4"
  category: create_table
  section: wage-employer
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.all_empl_wage_2016q4;
  \nCREATE TABLE ada_tdc_2020.all_empl_wage_2016q4
  \nSELECT *, format('%s-%s-1', year, quarter*3-2) as job_yr_q
  \nfrom in_dwd.wage_by_employer
  \nWHERE 
  \n((year = 2016 and quarter = 4) or (year = 2017 and quarter in (1,2))"

- title: "all_empl_wage_2009q1"
  category: create_table
  section: wage-employer
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.all_empl_wage_2009q1;
  \nCREATE TABLE ada_tdc_2020.all_empl_wage_2009q1 as
  \nSELECT *
  \nfrom in_dwd.wage_by_employer
  \nWHERE 
  \nyear = 2009 and quarter in (1,2,3)"

- title: "all_empl_char_2009q1"
  category: create_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.all_empl_char_2009q1;
  \nCREATE TABLE ada_tdc_2020.all_empl_wage_2009q1
  \nSELECT fein, cnty, naics_3_digit, year, quarter, job_yr_q
  \ncount(ssn) as tot_employment,
  \nsum(wages) as tot_earnings,
  \nsum(wages)/count(ssn) as avg_earnings,
  \npercentile_disc(0.25) within group (order by wages) as bottom_25_earnings,
  \npercentile_disc(0.75) within group (order by wages) as top_25_earnings
  \nfrom ada_tdc_2020.all_empl_wage_2009q1
  \nwhere quarter = 2 and year = 2009
  \ngroup by fein, cnty,naics_3_digit, year, quarter,job_yr_q;"

- title: "alter_all_empl_char_2009q1"
  category: alter_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "ALTER TABLE ada_tdc_2020.all_empl_char_2009q1
  \nADD COLUMN full_quarter_employment int,
  \nADD COLUMN full_quarter_earnings int,
  \nADD COLUMN full_quarter_avg_earnings int"

- title: "update_all_empl_char_2009q1"
  category: update_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "UPDATE ada_tdc_2020.all_empl_char_2009q1 as a
  \nSET
  \nfull_quarter_employment = b.full_quarter_employment,
  \nfull_quarter_earnings = b.full_quarter_earnings
  \nfull_quarter_avg_earnings = b.full_quarter_avg_earnings
  \nFROM (
  \n\tSELECT
  \n\ta.fein, a.cnty,
  \n\tCOUNT(DISTINCT(a.ssn)) as full_quarter_employment,
  \n\tsum(a.wages) as full_quarter_earnings,
  \n\tsum(a.wages)/COUNT(DISTINCT(a.ssn)) as full_quarter_avg_earnings
  \n\tFROM ada_tdc_2020.all_empl_wage_2009q1 a,
  \n\tada_tdc_2020.all_empl_wage_2009q1 b,
  \n\tada_tdc_2020.all_empl_wage_2009q1 c
  \n\tWHERE
  \n\ta.ssn = b.ssn AND a.ssn = c.ssn AND
  \n\ta.fein = b.fein AND a.fein = c.fein AND
  \n\ta.job_yr_q = (b.job_yr_q - '3 month'::interval)::date 
  \n\tAND a.job_yr_q = (c.job_yr_q + '3 month'::interval)::date
  \n\tgroup by a.fein,a.cnty) as b
  \nWHERE a.fein = b.fein;" 

- title: "create_stable_empl_base_2009q1"
  category: create_table
  section: employer-characteristics-base
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.stable_empl_base_2009q1;
  \nCREATE TABLE ada_tdc_2020.stable_empl_base_2009q1 as
  \nSELECT 
  \na.*
  \nFROM ada_tdc_2020.all_empl_wage_2009q1 a,
  \nada_tdc_2020.all_empl_wage_2009q1 b,
  \nada_tdc_2020.all_empl_wage_2009q1 c
  \nWHERE
  \na.ssn = b.ssn AND a.ssn = c.ssn AND
  \na.fein = b.fein AND a.fein = c.fein AND
  \na.job_yr_q = (b.job_yr_q - '3 month'::interval)::date 
  \nAND a.job_yr_q = (c.job_yr_q + '3 month'::interval)::date"

- title: "update_all_empl_char_2009q1_from_base"
  category: update_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "UPDATE ada_tdc_2020.all_empl_char_2009q1 as a
  \nSET
  \nfull_quarter_employment = b.full_quarter_employment,
  \nfull_quarter_earnings = b.full_quarter_earnings
  \nfull_quarter_avg_earnings = b.full_quarter_avg_earnings
  \nFROM (
  \n\tSELECT
  \n\tfein, cnty,
  \n\tCOUNT(DISTINCT(ssn)) as full_quarter_employment,
  \n\tsum(wages) as full_quarter_earnings,
  \n\tsum(wages)/COUNT(DISTINCT(ssn)) as full_quarter_avg_earnings
  \n\tFROM ada_tdc_2020.stable_empl_base_2009q1
  \n\tgroup by fein,cnty) as b
  \nWHERE a.fein = b.fein;" 

- title: "all_empl_char_2016q4"
  category: create_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.all_empl_char_2016q4;
  \nCREATE TABLE ada_tdc_2020.all_empl_char_2016q4
  \nSELECT fein, cnty, naics_3_digit, year, quarter, job_yr_q
  \ncount(ssn) as tot_employment,
  \nsum(wages) as tot_earnings,
  \nsum(wages)/count(ssn) as avg_earnings,
  \npercentile_disc(0.25) within group (order by wages) as bottom_25_earnings,
  \npercentile_disc(0.75) within group (order by wages) as top_25_earnings
  \nfrom ada_tdc_2020.all_empl_wage_2016q4
  \nwhere quarter = 1 and year = 2017
  \ngroup by fein, cnty,naics_3_digit, year, quarter,job_yr_q;"

- title: "alter_all_empl_char_2016q4"
  category: alter_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "ALTER TABLE ada_tdc_2020.all_empl_char_2016q4
  \nADD COLUMN full_quarter_employment int,
  \nADD COLUMN full_quarter_earnings int,
  \nADD COLUMN full_quarter_avg_earnings int"

- title: "update_all_empl_char_2016q4"
  category: update_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "UPDATE ada_tdc_2020.all_empl_char_2016q4 as a
  \nSET
  \nfull_quarter_employment = b.full_quarter_employment,
  \nfull_quarter_earnings = b.full_quarter_earnings
  \nfull_quarter_avg_earnings = b.full_quarter_avg_earnings
  \nFROM (
  \n\tSELECT
  \n\ta.fein, a.cnty,
  \n\tCOUNT(DISTINCT(a.ssn)) as full_quarter_employment,
  \n\tsum(a.wages) as full_quarter_earnings,
  \n\tsum(a.wages)/COUNT(DISTINCT(a.ssn)) as full_quarter_avg_earnings
  \n\tFROM ada_tdc_2020.all_empl_wage_2016q4 a,
  \n\tada_tdc_2020.all_empl_wage_2016q4 b,
  \n\tada_tdc_2020.all_empl_wage_2016q4 c
  \n\tWHERE
  \n\ta.ssn = b.ssn AND a.ssn = c.ssn AND
  \n\ta.fein = b.fein AND a.fein = c.fein AND
  \n\ta.job_yr_q = (b.job_yr_q - '3 month'::interval)::date 
  \n\tAND a.job_yr_q = (c.job_yr_q + '3 month'::interval)::date
  \n\tgroup by a.fein,a.cnty) as b
  \nWHERE a.fein = b.fein;" 

- title: "create_stable_empl_base_2016q4"
  category: create_table
  section: employer-characteristics-base
  notebook: create_tables
  language: sql
  code: "DROP TABLE IF EXISTS ada_tdc_2020.stable_empl_base_2016q4;
  \nCREATE TABLE ada_tdc_2020.stable_empl_base_2016q4 as
  \nSELECT 
  \na.*
  \nFROM ada_tdc_2020.all_empl_wage_2009q1 a,
  \nada_tdc_2020.all_empl_wage_2009q1 b,
  \nada_tdc_2020.all_empl_wage_2009q1 c
  \nWHERE
  \na.ssn = b.ssn AND a.ssn = c.ssn AND
  \na.fein = b.fein AND a.fein = c.fein AND
  \na.job_yr_q = (b.job_yr_q - '3 month'::interval)::date 
  \nAND a.job_yr_q = (c.job_yr_q + '3 month'::interval)::date"

- title: "update_all_empl_char_2016q4_from_base"
  category: update_table
  section: employer-characteristics
  notebook: create_tables
  language: sql
  code: "UPDATE ada_tdc_2020.all_empl_char_2016q4 as a
  \nSET
  \nfull_quarter_employment = b.full_quarter_employment,
  \nfull_quarter_earnings = b.full_quarter_earnings
  \nfull_quarter_avg_earnings = b.full_quarter_avg_earnings
  \nFROM (
  \n\tSELECT
  \n\tfein, cnty,
  \n\tCOUNT(DISTINCT(ssn)) as full_quarter_employment,
  \n\tsum(wages) as full_quarter_earnings,
  \n\tsum(wages)/COUNT(DISTINCT(ssn)) as full_quarter_avg_earnings
  \n\tFROM ada_tdc_2020.stable_empl_base_2016q4
  \n\tgroup by fein,cnty) as b
  \nWHERE a.fein = b.fein;"  

- title: "num_wage_jobs_by_ssn_input"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "\nyear <- 2017
  \nquarter <- 1"

- title: "num_wage_jobs_by_ssn_base_query"
  category: update_table
  section: wages
  notebook: data_exploration
  language: sql
  code: "base_query <- \"SELECT
  \nssn, sum(wages) as tot_wages, count(*) as num_jobs
  \nFROM ada_tdc_2020.tanf_wage_2016q4
  \nWHERE year = %d and quarter = %d
  \nGROUP BY ssn
  \nORDER BY ssn
  limit 100;\""

- title: "num_wage_jobs_by_ssn_query"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "query <- sprintf(base_query, year, quarter)
  \ndf_2016 <- dbGetQuery(con,query)"

- title: "dist_wages_num_jobs_input"
  category: update_table
  section: wages
  notebook: data_exploration
  language: sql
  code: "cohort <- \"2016q4\"
  \nyear <- 2017
  \nquarter <- 1"

- title: "dist_wages_num_jobs_base_query"
  category: update_table
  section: wages
  notebook: data_exploration
  language: sql
  code: "SELECT 
  \n\tunnest(
    \n\t\tpercentile_cont(array[0.1,0.25,0.5,.075,0.9])
    \n\t\tWITHIN GROUP (ORDER BY a.num_jobs)
    \n\t\t) AS num_jobs,
    
  \n\tunnest(
    \n\t\tpercentile_cont(array[0.1,0.25,0.5,.075,0.9])
    \n\t\tWITHIN GROUP (ORDER BY a.tot_wages)
    \n\t\t) AS wages,
  
  \n\tunnest(array[0.1,0.25,0.5,.075,0.9]) as percentile_value
  \n FROM (
    \n\t SELECT ssn, sum(wages) as tot_wages, count(*) as num_jobs
    \n\t FROM ada_tdc_2020.tanf_wage_%s
    \n\t WEHRE year   = %d and quarter = %d
    \n\t GROUP BY ssn
    \n\tORDER BY ssn) 
    \t as a"

- title: "dist_wages_num_jobs_query"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "query <- sprintf(base_query, cohort, year, quarter)
  \ndf_jobs_wages <- dbGetQuery(con,query)"

- title: "num_stable_employed"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "cohort <- \"2016Q4\"
  \nbase_query <- \"SELECT
  \nCOUNT(DISTINCT(a.ssn))
  \nFROM ada_tdc_2020.tanf_wage_%1$s a,
\nada_tdc_2020.tanf_wage_%1$s b,
\nada_tdc_2020.tanf_wage_%1$s c
\nWHERE a.ssn = b.ssn and a.uiacct = b.uiacct and 
\na.job_yr_q = (b.job_yr_q - '3 month'::interval)::date AND
\na.job_yr_q = (c.job_yr_q - '3 month'::interval)::date\"
\n\nquery <- sprintf(base_query,rep(cohort,3))
\n\nnum_stable_tanf_df <- dbGetQuery(con, query)"

- title: "num_tanf_employed"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "cohort <- \"2016Q4\"
  \nnum_employed_tanf_df <- dbGetQuery(con, 
  \n\t\tsprintf(\"select count(distinct ssn) 
  \n\t\tfrom ada_tdc_2020.tanf_wage_%1$s\",cohort))"

- title: "rate_stable_employed"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "num_stable_tanf_df$count/num_employed_tanf_df$count"


- title: "rate_stable_tanf"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "num_stable_tanf_df$count/num_tanf_df$count"

- title: "tanf_cohort_preview"
  category: update_table
  section: wages
  notebook: data_exploration
  language: sql
  code: "query <- \"SELECT *
\nFROM ada_tdc_2020.tanf_2016q4
\nLIMIT 10;\"
\n
\ncohort_df <- dbGetQuery(con,query)"
# - title: "num_rate_stable_employment"
#   category: update_table
#   section: wages
#   notebook: data_exploration
#   language: r
#   code: "cohort <- \"2016Q4\"
#   \nbase_query <- \"SELECT
#   \nCOUNT(DISTINCT(a.ssn))
#   \nFROM ada_tdc_2020.tanf_wage_%1$s a,
# \nada_tdc_2020.tanf_wage_%1$s b,
# \nada_tdc_2020.tanf_wage_%1$s c
# \nWHERE a.ssn = b.ssn and a.uiacct = b.uiacct and 
# \na.job_yr_q = (b.job_yr_q - '3 month'::interval)::date AND
# \na.job_yr_q = (c.job_yr_q - '3 month'::interval)::date\"
# \n\nquery <- sprintf(base_query,rep(cohort,3))
# \n\nnum_stable_tanf_df <- dbGetQuery(con, query)"
- title: "num_tanf"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "cohort <- \"2016Q4\"
  \nnum_tanf_df <- dbGetQuery(con, 
  \n\t\tsprintf(\"SELECT COUNT(DISTINCT ssn) 
  \n\t\tFROM ada_tdc_2020.tanf_%s\",cohort))"
- title: "rate_stable_tanf"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "num_stable_tanf_df$count/num_employed_tanf_df$count"

- title: "rate_tanf_employed"
  category: update_table
  section: wages
  notebook: data_exploration
  language: r
  code: "num_employed_tanf_df$count/num_tanf_df$count"
  

- title: "employer_char_preview"
  category: select
  section: employers
  notebook: data_exploration
  language: sql
  code: "num_employed_tanf_df$count/num_tanf_df$count"
